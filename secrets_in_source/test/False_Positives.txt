[FP01] sasl_plain_password: str = None):
[FP02] PASS : A booking can be  (Value:
[FP03] KEY =  (Value:
[FP04] KEY = _model_init[ (Value: 
[FP05] pwd = getpass.getpass("Grafana password: ")
[FP06] ADMIN_PASSWORD: "${ADMIN_PASSWORD}"
[FP07] POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
[FP08] REPO_PASSWORD: ${{ secrets.REPO_PASSWORD }}
[FP09] SECRET =  (Value:  )
[FP10] password: ""
[FP11] argocdServerAdminPassword: ""
[FP12] [[ -n "${KAFKA_ZOOKEEPER_TLS_KEYSTORE_PASSWORD:-}" ]] && kafka_conf_set "$KAFKA_CONFIG_FILE" "zookeeper.ssl.keystore.password" "${KAFKA_ZOOKEEPER_TLS_KEYSTORE_PASSWORD}"
[FP13] [[ -n "${KAFKA_TLS_KEYSTORE_PASSWORD:-}" ]] && kafka_conf_set "$KAFKA_CONFIG_FILE" "ssl.keystore.password" "$KAFKA_TLS_KEYSTORE_PASSWORD"
[FP14] [[ -n "${KAFKA_TLS_TRUSTSTORE_PASSWORD:-}" ]] && kafka_conf_set "$KAFKA_CONFIG_FILE" "ssl.truststore.password" "$KAFKA_TLS_TRUSTSTORE_PASSWORD"
[FP15] [[ -n "${KAFKA_TLS_PEM_KEY_PASSWORD:-}" ]] && kafka_conf_set "$KAFKA_CONFIG_FILE" "ssl.key.password" "$KAFKA_TLS_PEM_KEY_PASSWORD"
[FP16] local password="${2:?missing password value}"
[FP17] password = ${{ secrets.password }}
[FP18] - REDIS_PASSWORD=${REDIS_PASSWORD:-redis}
[FP19] command: redis-server --port ${REDIS_PORT} --requirepass ${REDIS_PASSWORD:-redis}
[FP20] STELLA_API_PASSWORD: ${{ secrets.STELLA_API_PASSWORD }}
[FP21] password: ${{ secrets.NEXUS_PASSWORD }}
[FP22] sed -i "s/^ADMIN_PASSWORD=.*/ADMIN_PASSWORD=$ADMIN_PASSWORD/" "$ENV_FILE"
[FP23] ADMIN_PASSWORD=$3
[FP24] export REDIS_PASSWORD=$(cat /secrets/redis-password)
[FP25] export REDIS_PASSWORD=$(cat /secrets/redis-password)
[FP26] export REDIS_PASSWORD=$(cat /secrets/redis-password)
[FP27] --env="SUPER_PASSWORD=$POSTGRES_PASSWORD"
[FP28] --env="PGPASSWORD=$POSTGRES_PASSWORD"
[FP29] export POSTGRES_PASSWORD=$(kubectl get secret --namespace base postgresql -o jsonpath="{.data.postgresql-password}" | base64 --decode)
[FP30] export PGPASSWORD=$SUPER_PASSWORD
[FP31] echo SUPSER_PASSWORD: HIDDEN
[FP32] DD_API_KEY=$(echo $SECRET | jq --raw-output .ddApiKey)
[FP33] TLS_KEY=$(echo $SECRET | jq --raw-output .istioIngressTlsKey)
[FP34] SECRET=$(aws secretsmanager get-secret-value --secret-id $SECRET_NAME --region $REGION --query SecretString --output text)
[FP35] APP_KEY=$(echo $SECRET | jq --raw-output .githubAppPrivateKey)
[FP36] TLS_KEY=$(echo $SECRET | jq --raw-output .istioIngressTlsKey)
[FP37] SECRET=$(aws secretsmanager get-secret-value --secret-id $SECRET_NAME --region $REGION --query SecretString --output text)
[FP38] SECRET=$(aws secretsmanager get-secret-value --secret-id "$SECRET_NAME" --output text --query "SecretString")
[FP39] export AUTH_PASSWORD=$AUTH_PASSWORD
[FP40] PASSWORD=$(keyring get $REPO_URL $USERNAME 2>/dev/null)
[FP41] parser.error(f"Arguments to {opt_str} must be of the form KEY=VAL")
[FP42] "Settings take the form KEY=VALUE. Use multiple --config-settings options "
[FP43] kubectl run --namespace {{ include "common.names.namespace" . }} redis-client --restart='Never' {{ if .Values.auth.enabled }} --env REDIS_PASSWORD=$REDIS_PASSWORD {{ end }} --image {{ template "redis.image" . }} --command -- sleep infinity
[FP44] "docker:build": "docker build -t stella-connect . --build-arg DEPLOY_ENVIRONMENT=local --build-arg BUILD_VERSION=$(yarn get:build:version) --build-arg DATADOG_API_KEY=$(yarn get:dd:key)",
[FP45] MQ_KAFKA_SASL_PLAIN_PASSWORD=
[FP46] REDIS_PASSWORD: ''
[FP47] ${{ secrets.SOMETHING }}
[FP48] HIDDEN
[FP49] kafka_common_conf_set "$CLIENT_CONF" sasl.jaas.config "org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required clientId="$SASL_CLIENT_ID" password="$SASL_CLIENT_SECRET";"
[FP50] username=get_usr(), password=get_pwd(), registry=registry
[FP51] service, usr, getpass.getpass(prompt="tl password: ")
[FP52] password=ENV["MONGODB_PASSWORD"],
[FP53] REDIS_PASSWORD = os.getenv('REDIS_PASSWORD', None)
[FP54] afka_common_conf_set "$CLIENT_CONF" sasl.jaas.config "org.apache.kafka.common.security.plain.PlainLoginModule required username="$SASL_USERNAME" password="$SASL_USER_PASSWORD";" (Value:
[FP55] ##       kubectl create secret generic SECRET_NAME --from-literal=client-passwords=CLIENT_PASSWORD1,CLIENT_PASSWORD2 --from-literal=inter-broker-password=INTER_BROKER_PASSWORD --from-literal=inter-broker-client-secret=INTER_BROKER_CLIENT_SECRET --from-literal=controller-password=CONTROLLER_PASSWORD --from-literal=controller-client-secret=CONTROLLER_CLIENT_SECRET --from-literal=zookeeper-password=ZOOKEEPER_PASSWORD
[FP56] lambda: connect(host=host, port=REDIS_PORT, pwd=REDIS_PW, db=REDIS_DB)


#
# Known test failures
#
# FP55 -- challenging due to direct assignment. Would need to parse string to see if assignment is being made to an all-caps variable name
#
#
# Run these test cases with the following command: ./passhog_simple.sh ./test/ -t txt
