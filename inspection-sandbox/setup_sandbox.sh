#!/bin/bash
# -----------------------------------------------------------------------------
#
# Script Name: setup_sandbox.sh
#
# Description: This script sets up a secure sandbox environment for inspecting
#              potentially malicious files. It handles dependency checking,
#              directory creation, downloading the Alpine Linux ISO, and
#              generating and managing SSH keys via a .env file.
#
# Usage:
#   ./setup_sandbox.sh        - Run the default setup process.
#   ./setup_sandbox.sh burn   - Destroy the entire sandbox environment.
#   ./setup_sandbox.sh test   - Run a test of the sandbox environment.
#   ./setup_sandbox.sh start  - Start the sandbox VM.
#
# Author: Gemini
#
# Last Updated: 2025-10-08
#
# -----------------------------------------------------------------------------

# Exit immediately if a command exits with a non-zero status.
set -e

# --- Configuration ---
SANDBOX_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"
SHARED_DIR="${SANDBOX_DIR}/shared"
VM_NAME="inspection-sandbox"
ENV_FILE="${SANDBOX_DIR}/.env"
# Alpine Linux latest stable version (check https://alpinelinux.org/downloads/ for updates)
ALPINE_VERSION="3.22.1"
ALPINE_ISO_URL="https://dl-cdn.alpinelinux.org/alpine/v${ALPINE_VERSION%.*}/releases/x86_64/alpine-virt-${ALPINE_VERSION}-x86_64.iso"

# --- Functions ---

# Checks for required dependencies.
check_dependencies() {
    echo "--- Checking for dependencies ---"
    local missing_deps=0

    if ! command -v brew &>/dev/null; then
        echo "‚ùå Error: Homebrew is not installed. Please install it from https://brew.sh/"
        missing_deps=$((missing_deps + 1))
    fi

    if ! command -v utmctl &>/dev/null; then
        echo "‚ùå Error: UTM is not installed. Please install it via 'brew install --cask utm'"
        missing_deps=$((missing_deps + 1))
    fi

    if [ "$missing_deps" -ne 0 ]; then
        echo "Please install the missing dependencies and run the script again."
        exit 1
    fi
    echo "‚úÖ All dependencies are installed."
}

# Creates the required directories.
create_directories() {
    echo "--- Creating directories ---"
    mkdir -p "${SHARED_DIR}"
    echo "‚úÖ Directories created."
}

# Downloads the Alpine Linux ISO.
download_iso() {
    echo "--- Downloading Alpine Linux ISO ---"
    if [ ! -f "${SANDBOX_DIR}/alpine.iso" ]; then
        echo "Downloading from ${ALPINE_ISO_URL}..."
        curl -L -o "${SANDBOX_DIR}/alpine.iso" "${ALPINE_ISO_URL}"
    else
        echo "‚úÖ Alpine Linux ISO already exists."
    fi
    echo "‚úÖ Alpine Linux ISO is ready."
}

# Initializes .env file with configuration if it doesn't exist.
init_env_file() {
    if [ ! -f "${ENV_FILE}" ]; then
        echo "--- Initializing .env file ---"
        cat > "${ENV_FILE}" << 'EOF'
# Malware Inspection Sandbox - Environment Variables
# This file stores sensitive keys and configuration
# IMPORTANT: This file is in .gitignore and will NOT be committed

# =============================================================================
# SSH Keys (Base64 Encoded - Single Source of Truth)
# =============================================================================
# These keys are generated by setup_sandbox.sh and stored here
# Scripts will extract these to temporary runtime files when needed
# NEVER commit these keys to git!

SSH_PRIVATE_KEY_B64=""
SSH_PUBLIC_KEY=""

# =============================================================================
# VM Configuration
# =============================================================================
VM_NAME=inspection-sandbox
VM_IP=192.168.64.2
VM_SSH_PORT=2222
VM_USER=root

# =============================================================================
# Paths and Directories
# =============================================================================
SHARED_DIR=./shared
ALPINE_ISO=./alpine.iso
ALPINE_VERSION=3.22.1
ALPINE_ISO_URL=https://dl-cdn.alpinelinux.org/alpine/v3.22/releases/x86_64/alpine-virt-3.22.1-x86_64.iso
EOF
        echo "‚úÖ .env file created."
    fi
}

# Generates an SSH key pair and stores it in .env.
generate_ssh_key() {
    echo "--- Managing SSH key pair ---"

    if [ -f "${ENV_FILE}" ]; then
        source "${ENV_FILE}"
        if [ -n "$SSH_PRIVATE_KEY_B64" ] && [ -n "$SSH_PUBLIC_KEY" ]; then
            echo "SSH keys found in .env, extracting to runtime files..."
            echo "$SSH_PRIVATE_KEY_B64" | base64 -d > "${SANDBOX_DIR}/id_rsa"
            chmod 600 "${SANDBOX_DIR}/id_rsa"
            echo "$SSH_PUBLIC_KEY" > "${SANDBOX_DIR}/id_rsa.pub"
            chmod 644 "${SANDBOX_DIR}/id_rsa.pub"
            cp "${SANDBOX_DIR}/id_rsa.pub" "${SHARED_DIR}/id_rsa.pub"
            echo "‚úÖ SSH keys extracted from .env."
            return 0
        fi
    fi

    echo "Generating new SSH key pair..."
    ssh-keygen -t rsa -b 4096 -f "${SANDBOX_DIR}/id_rsa" -N ""

    echo "Storing SSH keys in .env..."
    local private_key_b64=$(base64 -i "${SANDBOX_DIR}/id_rsa" | tr -d '\n')
    local public_key=$(cat "${SANDBOX_DIR}/id_rsa.pub")

    if [ -f "${ENV_FILE}" ]; then
        sed -i '' "s|^SSH_PRIVATE_KEY_B64=\"\"$|SSH_PRIVATE_KEY_B64=\"${private_key_b64}\"|" "${ENV_FILE}"
        sed -i '' "s|^SSH_PUBLIC_KEY=\"\"$|SSH_PUBLIC_KEY=\"${public_key}\"|" "${ENV_FILE}"
    fi

    cp "${SANDBOX_DIR}/id_rsa.pub" "${SHARED_DIR}/id_rsa.pub"

    echo "‚úÖ SSH key pair generated and stored in .env."
    echo "‚ö†Ô∏è  IMPORTANT: id_rsa and id_rsa.pub files are in .gitignore and will NOT be committed."
}

# Destroys the sandbox environment.
burn() {
    start_time=$(date +%s)
    echo "--- Destroying sandbox environment ---"
    if utmctl status "${VM_NAME}" &>/dev/null; then
        if utmctl status "${VM_NAME}" | grep -q "started"; then
            echo "Stopping VM..."
            utmctl stop "${VM_NAME}"
        fi
        echo "Deleting VM..."
        utmctl delete "${VM_NAME}"
    fi
    echo "Removing sandbox directories and keys..."
    rm -rf "${SHARED_DIR}"
    rm -f "${SANDBOX_DIR}/id_rsa" "${SANDBOX_DIR}/id_rsa.pub" "${SANDBOX_DIR}/alpine.iso"
    echo "‚úÖ Sandbox environment destroyed."
    end_time=$(date +%s)
    execution_time=$((end_time - start_time))
    echo "Execution time: ${execution_time} seconds."
}

# Tests the sandbox environment.
test_sandbox() {
    start_time=$(date +%s)
    echo "--- Testing sandbox environment ---"

    echo "Listing all VMs..."
    utmctl list

    if ! utmctl status "${VM_NAME}" &>/dev/null; then
        echo "‚ùå Error: VM is not registered. Please create it first."
        exit 1
    fi

    echo "Creating a test file..."
    local test_file="${SHARED_DIR}/test_file.txt"
    echo "This is a test file." > "${test_file}"

    if ! utmctl status "${VM_NAME}" | grep -q "started"; then
        echo "Starting VM..."
        utmctl start "${VM_NAME}"
    fi

    echo "Waiting for VM to boot and SSH to be available..."
    local i=0
    while ! nc -z localhost 2222 && [ $i -lt 30 ]; do
        echo -n "."
        sleep 1
        i=$((i+1))
    done
    echo

    if [ $i -eq 30 ]; then
        echo "‚ùå Error: Timed out waiting for SSH port."
        exit 1
    fi

    echo "Running analysis script inside the VM..."
    ssh -v -i "${SANDBOX_DIR}/id_rsa" -o StrictHostKeyChecking=no -p 2222 root@localhost -- "/media/shared/analyze.sh scan /media/shared/test_file.txt"

    echo "Stopping the VM..."
    utmctl stop "${VM_NAME}"

    echo "‚úÖ Sandbox environment test complete."
    end_time=$(date +%s)
    execution_time=$((end_time - start_time))
    echo "Execution time: ${execution_time} seconds."
}

# Main function
main() {
    start_time=$(date +%s)

    if [ $# -eq 0 ]; then
        echo "--- Starting Sandbox Setup ---"
        check_dependencies
        create_directories
        init_env_file
        download_iso
        generate_ssh_key
        echo ""
        echo "‚úÖ Sandbox setup complete!"
        echo ""
        echo "üìù Next steps:"
        echo "   1. Create the VM in UTM by following './create-vm.sh'."
        echo "   2. Install Alpine Linux inside the VM."
        echo "   3. Provision the VM using './provision-vm.sh'."
        echo ""
        echo "‚ö†Ô∏è  The single source of truth for SSH keys is the .env file (which is gitignored)."
        
        end_time=$(date +%s)
        execution_time=$((end_time - start_time))
        echo "Total setup time: ${execution_time} seconds."
        exit 0
    fi

    case "$1" in
        burn)
            burn
            ;;
        test)
            test_sandbox
            ;;
        start)
            utmctl start "${VM_NAME}"
            ;;    
        *)
            echo "Invalid command: $1"
            exit 1
            ;;    
    esac
}

# --- Main execution ---
main "$@"
